{"version":3,"sources":["logo.svg","schedule.js","player.js","RandomStats.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Schedule","props","state","random","fetch","then","response","json","res","console","log","setState","catch","err","error","className","Component","Player","RandomTeamStats","this","App","window","localStorage","clear","to","src","path","component","exact","player","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,oKC8B5BC,G,kBA1BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,IAHG,E,iFAME,IAAD,OAChBC,MAAM,uGAAuGC,MAAK,SAAAC,GAC9G,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACb,EAAKG,SAAS,CACbR,OAAQK,EAAI,QAGfI,OAAM,SAAAC,GAAG,OAAIJ,QAAQK,MAAMD,Q,+BAG5B,OACI,yBAAKE,UAAU,UACVN,QAAQC,IAAI,c,GArBNM,cC2BRC,E,YA1BX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,IAHG,E,iFAME,IAAD,OAChBC,MAAM,wHAAwHC,MAAK,SAAAC,GAC/H,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACb,EAAKG,SAAS,CACbR,OAAQK,EAAI,QAGfI,OAAM,SAAAC,GAAG,OAAIJ,QAAQK,MAAMD,Q,+BAG5B,OACI,yBAAKE,UAAU,UACVN,QAAQC,IAAI,c,GArBRM,aC2BNE,E,YA1BX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,IAHG,E,iFAME,IAAD,OAChBC,MAAM,wHAAwHC,MAAK,SAAAC,GAC/H,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACb,EAAKG,SAAS,CACbR,OAAQK,OAGXI,OAAM,SAAAC,GAAG,OAAIJ,QAAQK,MAAMD,Q,+BAG5B,OACI,yBAAKE,UAAU,UACVI,KAAKjB,MAAMC,Y,GArBEa,aCoEfI,E,YA9Db,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,4EAOjBmB,OAAOC,aAAaC,U,+BAGpB,OACE,6BACA,6BACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,yBACEC,IAAI,0DACJV,UAAU,UAGd,kBAAC,IAAD,CAAMS,GAAG,aACP,yCAKF,kBAAC,IAAD,CAAMA,GAAG,iBACP,6CAGF,kBAAC,IAAD,CAAMA,GAAG,iBACP,oDAMN,8BACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOE,KAAK,YAAYC,UAAW3B,IAFrC,KAKE,kBAAC,IAAD,CAAO4B,OAAK,EAACF,KAAK,gBAAgBC,UAAWE,IAC7C,kBAAC,IAAD,CAAOD,OAAK,EAACF,KAAK,gBAAgBC,UAAWT,W,GA7CrCF,aCIEc,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SDuH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.ff91b6f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component} from \"react\"\n\n\nclass Schedule extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            random: []\n         }\n    }\n    componentDidMount() {\n        fetch('https://api.sportsdata.io/v3/nfl/scores/json/Schedules/2019REG?key=20ee13fb6ee14c55960448ea7245cb54').then(response => {\n            return response.json()\n        }).then(res => {\n            console.log(res)\n           this.setState({\n            random: res[0]\n           }) \n        })\n        .catch(err => console.error(err))\n    }\n    render() { \n        return ( \n            <div className=\"random\">\n                {console.log('hello')}\n            </div>\n         )\n    }\n}\n \nexport default Schedule;","import React, { Component} from \"react\"\n\n\nclass Player extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            random: []\n         }\n    }\n    componentDidMount() {\n        fetch('https://api.sportsdata.io/v3/nfl/stats/json/PlayerGameStatsByTeam/2019REG/2/DEN?key=20ee13fb6ee14c55960448ea7245cb54').then(response => {\n            return response.json()\n        }).then(res => {\n            console.log(res)\n           this.setState({\n            random: res[0]\n           }) \n        })\n        .catch(err => console.error(err))\n    }\n    render() { \n        return ( \n            <div className=\"random\">\n                {console.log('hello')}\n            </div>\n         )\n    }\n}\n \nexport default Player;","import React, { Component} from \"react\"\n\n\nclass RandomTeamStats extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            random: []\n         }\n    }\n    componentDidMount() {\n        fetch('https://api.sportsdata.io/v3/nfl/stats/json/PlayerSeasonStatsByTeam/2019REG/WAS?key=20ee13fb6ee14c55960448ea7245cb54').then(response => {\n            return response.json()\n        }).then(res => {\n            console.log(res)\n           this.setState({\n            random: res\n           }) \n        })\n        .catch(err => console.error(err))\n    }\n    render() { \n        return ( \n            <div className=\"random\">\n                {this.state.random}\n            </div>\n         )\n    }\n}\n \nexport default RandomTeamStats;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Schedule from './schedule';\nimport player from './player'\nimport RandomTeamStats from './RandomStats'\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n  \n  clearStorage(){\n    window.localStorage.clear();\n  };\n  render(){\n    return (\n      <div>\n      <div>\n        <nav>\n          <Link to='/'>\n            <img\n              src='https://icon-library.net/images/nfl-icon/nfl-icon-8.jpg'\n              className='icon'\n            />\n          </Link>\n          <Link to='/schedule'>\n            <h2>schedule</h2>\n          </Link>\n          {/* <Link to='/newuser'>\n            <h2>New Palz</h2>\n          </Link> */}\n          <Link to='/player/stats'>\n            <h2>player stats</h2>\n          </Link>\n\n          <Link to='/random/stats'>\n            <h2>Random Team Stats</h2>\n          </Link>\n        </nav>\n\n        {/* <div className=\"randobeer\"><Random /></div> */}\n      </div>\n      <main>\n        <Switch>\n          {/* <Route exact path='/'  /> */}\n          <Route path='/schedule' component={Schedule} />\n          />\n          \n          <Route exact path='/player/stats' component={player} />\n          <Route exact path='/random/stats' component={RandomTeamStats} />\n          {/* <Route exact path=\"/show/posts/:uid?\" component={Posts}/>\n          <Route exact path=\"/newpost\" component={New}/>\n          <Route path=\"/showpost/:id\" render={routerProps => <Showpost {...routerProps}/>}/>\n          <Route exact path='/edit/:id' component={Showpost} />\n          <Route exact path='/yeetrandom' component={Random} />\n          <Route exact path='/newuser' component={NewUser} />\n          <Route exact path=\"/category/:category\" component={Category}/>\n          <div className=\"userProfile\">\n          <Route path='/show/users' component={User} /></div> */}\n        </Switch>\n      </main>\n    </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}